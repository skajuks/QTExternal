#include "Visuals.h"
#include "Functions.h"
#include "offsets.hpp"
#include "NetVars.hpp"
#include "Structs.h"
#include "paint.h"

using namespace hazedumper::netvars;
using namespace hazedumper::signatures;

Chams clr_team = {255,255,0};
Chams clr_enemy = {0,255,255};

Paint Paint();

bool glow_enabled = false;
bool enableHealthGlow = true;
bool call_brightness_on_loop = false;
float alpha = 1.f;

float brightness = 100.f;

// team glows
BYTE TeamR = 255;
BYTE TeamG = 0;
BYTE TeamB = 0;

//enemy glows
BYTE ETeamR = 0;
BYTE ETeamG = 0;
BYTE ETeamB = 255;

bool Glow::glowEnabled(){
    if(glow_enabled)
        return true;
    else
        return false;
}

void Glow::teamChamsStateChanged(int tChams[3]){
    clr_team.red = (BYTE)tChams[0];
    clr_team.green = (BYTE)tChams[1];
    clr_team.blue = (BYTE)tChams[2];
}


void Glow::enemyChamsStateChanged(int eChams[3]){
    clr_enemy.red = (BYTE)eChams[0];
    clr_enemy.green = (BYTE)eChams[1];
    clr_enemy.blue = (BYTE)eChams[2];
}

void Glow::brightnessStateChanged(bool state, float bright){
    brightness = bright;
    setBrightness();
}

void Glow::setGlowEnabled(bool state){
    glow_enabled = state;
}
void Glow::setEnableHealthGlow(bool state){
    enableHealthGlow = state;
}

void Glow::setGlowAlpha(float value){
    alpha = value;
}

void Glow::setGlowTeamColor(int r, int g, int b, bool lPlayerTeam){
    if(lPlayerTeam){
        TeamR = (BYTE)r;
        TeamG = (BYTE)g;
        TeamB = (BYTE)b;
    }else{
        ETeamR = (BYTE)r;
        ETeamG = (BYTE)g;
        ETeamB = (BYTE)b;
    }
}

static GlowObject setGlowColor(GlowObject glow, int health, uintptr_t entity) {
    if (Functions::isDefusing(entity)) {
        glow.red = 255;
        glow.blue = 255;
        glow.green = 255;
    }
    else {
        if(enableHealthGlow){
            glow.red = health * -0.01 + 1;
            glow.green = health * 0.01;
        } else {
            glow.red = ETeamR;
            glow.green = ETeamG;
            glow.blue = ETeamB;
        }
    }
    glow.alpha = alpha;
    glow.renderWhenOccluded = true;
    glow.renderWhenUnoccluded = false;
    return glow;
}

void Glow::setBrightness() {
    int ptr = Memory.readMem<int>(engineModule + model_ambient_min);
    int xorptr = *(int*)&brightness ^ ptr;
    Memory.writeMem<int>(engineModule + model_ambient_min, xorptr);
}

void Glow::ProcessEntityTeam(const ClientInfo& ci, uintptr_t glowObject) {
    int glowIndex = Memory.readMem<int>(ci.entity + m_iGlowIndex);
    GlowObject tGlow;
    Memory.readMemTo<GlowObject>(glowObject + (glowIndex * 0x38), &tGlow);
    //tGlow = {{}, (float)TeamR, (float)TeamG, (float)TeamB, alpha, {}, true, false};
    tGlow.red = TeamR;
    tGlow.green = TeamG;
    tGlow.blue = TeamB;
    tGlow.alpha = alpha;
    tGlow.renderWhenOccluded = true;
    tGlow.renderWhenUnoccluded = false;
    Memory.writeMemFrom<GlowObject>(glowObject + (glowIndex * 0x38), &tGlow);
    Memory.writeMemFrom<Chams>(ci.entity + m_clrRender, &clr_team);
}

void Glow::ProcessEntityEnemy(const ClientInfo& ci, const Entity& e, uintptr_t glowObject) {
    int glowIndex = Memory.readMem<int>(ci.entity + m_iGlowIndex);
    GlowObject eGlow;
    Memory.readMemTo<GlowObject>(glowObject + (glowIndex * 0x38), &eGlow);
    eGlow = setGlowColor(eGlow, e.health, ci.entity);
    Memory.writeMemFrom<GlowObject>(glowObject + (glowIndex * 0x38), &eGlow);
    Memory.writeMemFrom<Chams>(ci.entity + m_clrRender, &clr_enemy);
}

void ProcessD3D9Render(const ClientInfo& ci, const Entity& e){
    player_info player;
    uintptr_t clientState = Functions::getClientState();
    uintptr_t uinfoTable = Memory.readMem<uintptr_t>(clientState + dwClientState_PlayerInfo);
    uintptr_t items = Memory.readMem<std::uintptr_t>(Memory.readMem<uintptr_t>(uinfoTable + 0x40) + 0xC);
    Memory.readMemTo<player_info>(Memory.readMem<uintptr_t>((items + 0x28) + (ci.entity * 0x34)), &player);   // read player struct
    
    view_matrix_t vm;
    Memory.readMemTo<view_matrix_t>(gameModule + dwViewMatrix, &vm);    // read player viewmatrix

    VECTOR3 pos = e
    
}
